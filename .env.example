# Copy this file to .env.local and update the values

# Authentication Configuration (Secure Server-Side)
# These are PBKDF2-hashed passwords with salt for maximum security
# Format: salt:hash (generated using the scripts/generate-secure-hashes.js utility)

# Super Admin Password (has all permissions, can manage users)
ADMIN_PASSWORD_HASH=your_super_admin_salt:your_super_admin_hash_here

# Viewer Password (read-only access)
VIEWER_PASSWORD_HASH=your_viewer_salt:your_viewer_hash_here

# JWT Secret for session management
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Custom Access Codes (JSON format, managed via admin panel)
CUSTOM_ACCESS_CODES=[]

# Shared Storage Configuration (Optional - for multi-user shared content)
# If not configured, app will use localStorage (per-user, per-browser storage)
# Get these from https://supabase.com (free tier available)
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url_here
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# CDN / GitHub Releases Configuration (REQUIRED for CDN functionality)
# Create a GitHub Personal Access Token with 'repo' scope
# Get these from: https://github.com/settings/tokens
GITHUB_TOKEN=your_github_personal_access_token_here
GITHUB_OWNER=your_github_username_here
GITHUB_REPO=your_github_repository_name_here

# DEPLOYMENT INSTRUCTIONS:
# For Vercel deployment, add these as Environment Variables in your Vercel dashboard:
# 1. ADMIN_PASSWORD_HASH (your super admin hash)
# 2. VIEWER_PASSWORD_HASH (your viewer hash) 
# 3. JWT_SECRET (generate a secure 64-character random string)
# 4. NEXT_PUBLIC_SUPABASE_URL (optional, for shared storage)
# 5. NEXT_PUBLIC_SUPABASE_ANON_KEY (optional, for shared storage)

# To generate secure password hashes, run:
# node scripts/generate-secure-hashes.js

# Example:
# Input: "mySecurePassword123"
# Output: "a1b2c3d4e5f6:9f8e7d6c5b4a3210fedcba0987654321..."
# Use the full output (salt:hash) as the value

# Role Hierarchy:
# - Super Admin: Full access, user management, invincible page management
# - Admin: Can edit/create/delete pages, manage gallery, view logs
# - Viewer: Read-only access to wiki and gallery

# Hardcoded Users (always available):
# - admin@d@rps (admin role)
# - visitor@1424 (viewer role)
# - Your super admin password from ADMIN_PASSWORD_HASH (super-admin role)

# Storage Options:
# 1. localStorage only (default): Each user sees only their own content
# 2. Supabase (recommended): All users share the same wiki pages and gallery
#    - Sign up at https://supabase.com
#    - Create a new project
#    - Get your project URL and anon key
#    - Run the SQL schema setup (see SUPABASE_SETUP.md)

# Security Features:
# - PBKDF2 with 100,000 iterations
# - 32-byte random salt per password
# - Timing-safe password verification
# - IP-based rate limiting
# - JWT-based session management
# - All authentication server-side only

# Never commit .env.local to version control!
