# Copy this file to .env.local and update the values

# Authentication Configuration (Secure Server-Side)
# These are PBKDF2-hashed passwords with salt for maximum security
# Format: salt:hash (generated using the scripts/generate-secure-hashes.js utility)

# Super Admin Password (has all permissions, can manage users)
ADMIN_PASSWORD_HASH=your_super_admin_salt:your_super_admin_hash_here

# Viewer Password (read-only access)
VIEWER_PASSWORD_HASH=your_viewer_salt:your_viewer_hash_here

# JWT Secret for session management
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Custom Access Codes (JSON format, managed via admin panel)
CUSTOM_ACCESS_CODES=[]

# DEPLOYMENT INSTRUCTIONS:
# For Vercel deployment, add these as Environment Variables in your Vercel dashboard:
# 1. ADMIN_PASSWORD_HASH (your super admin hash)
# 2. VIEWER_PASSWORD_HASH (your viewer hash) 
# 3. JWT_SECRET (generate a secure 64-character random string)

# To generate secure password hashes, run:
# node scripts/generate-secure-hashes.js

# Example:
# Input: "mySecurePassword123"
# Output: "a1b2c3d4e5f6:9f8e7d6c5b4a3210fedcba0987654321..."
# Use the full output (salt:hash) as the value

# Role Hierarchy:
# - Super Admin: Full access, user management, invincible page management
# - Admin: Can edit/create/delete pages, manage gallery, view logs
# - Viewer: Read-only access to wiki and gallery

# Security Features:
# - PBKDF2 with 100,000 iterations
# - 32-byte random salt per password
# - Timing-safe password verification
# - IP-based rate limiting
# - JWT-based session management
# - All authentication server-side only

# Never commit .env.local to version control!
